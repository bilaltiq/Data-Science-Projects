x <- 1:n_sim
#
beta_model1 <- 1:n_sim
beta_model2 <- 1:n_sim
# number of observations in each sample
n_obs <- 250
# set needed values for data generation
rmse <- 1
x1 <- rep(c(0,1), each=n_obs/2)
x2 <- runif(n_obs, min=0, max=5)
beta0 <- -1
beta1 <- 0.5
beta2 <- 1.5
# Generate data
for(i in 1:1000){
# for model 1, where constant var assumption is met (sd is constant value, rmse)
y1 <- beta0 + beta1*x1 + beta2*x2 + rnorm(n=n_obs, mean=0, sd=rmse)
# for model 2, where constant var assumption is violated (sd depends on x2)
y2 <- beta0 + beta1*x1 + beta2*x2 + rnorm(n=n_obs, mean=0, sd=rmse + x2)
# Fit the linear regression model
# for model 1
mod1 <- lm(y1 ~ x1 + x2)
# for model 2
mod2 <- lm(y2 ~ x1 + x2)
# Example to get beta_1 estimate from one model
beta_model1[i] <- summary(mod1)$coeff["x1","Estimate"]
beta_model2[i] <- summary(mod2)$coeff["x2", "Estimate"]
}
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
# target summary numbers: mean and sd/variance of beta_1 estimates, by model
# create target visualization
# create target summaries
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
# remember can use SHOW and EXPLAIN commands to explore what tables are available
# through this connection, and what variables/fields are in each table
dbGetQuery(aircon, "SHOW TABLES")
dbGetQuery(aircon, "EXPLAIN airports")
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
# remember can use SHOW and EXPLAIN commands to explore what tables are available
# through this connection, and what variables/fields are in each table
dbGetQuery(aircon, "SHOW TABLES")
#dbGetQuery(aircon, "EXPLAIN airports")
# can view first few obs of a table to see what the fields look like
dbGetQuery(aircon, "SELECT *
FROM airports
LIMIT 0,5")
?flights
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
#| label: load-packages
#| include: false
library(kableExtra)
library(tidyverse)
library(mdsr)
library(RMySQL)
# add other packages needed here!
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
# Original Code
x <- 1:10
y <- rep(0, 10)
for(i in 1:10){
y[i]= x[i]^2
}
y
# More efficient code
x <- 1:10 # you'll still want this part
y <- x^2
y
# Goal: repeatedly generate data, fit the model,
# and extract the beta1 coefficient (1,000 times)
# for both models (1) and (2)
# set seed for reproducibility
set.seed(231)
# number of simulations
n_sim <- 1000
#for iteration
x <- 1:n_sim
#
beta_model1 <- 1:n_sim
beta_model2 <- 1:n_sim
# number of observations in each sample
n_obs <- 250
# set needed values for data generation
rmse <- 1
x1 <- rep(c(0,1), each=n_obs/2)
x2 <- runif(n_obs, min=0, max=5)
beta0 <- -1
beta1 <- 0.5
beta2 <- 1.5
# Generate data
for(i in 1:1000){
# for model 1, where constant var assumption is met (sd is constant value, rmse)
y1 <- beta0 + beta1*x1 + beta2*x2 + rnorm(n=n_obs, mean=0, sd=rmse)
# for model 2, where constant var assumption is violated (sd depends on x2)
y2 <- beta0 + beta1*x1 + beta2*x2 + rnorm(n=n_obs, mean=0, sd=rmse + x2)
# Fit the linear regression model
# for model 1
mod1 <- lm(y1 ~ x1 + x2)
# for model 2
mod2 <- lm(y2 ~ x1 + x2)
# Example to get beta_1 estimate from one model
beta_model1[i] <- summary(mod1)$coeff["x1","Estimate"]
beta_model2[i] <- summary(mod2)$coeff["x2", "Estimate"]
}
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
# target summary numbers: mean and sd/variance of beta_1 estimates, by model
# create target visualization
# create target summaries
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
# remember can use SHOW and EXPLAIN commands to explore what tables are available
# through this connection, and what variables/fields are in each table
dbGetQuery(aircon, "SHOW TABLES")
#dbGetQuery(aircon, "EXPLAIN airports")
# can view first few obs of a table to see what the fields look like
dbGetQuery(aircon, "SELECT *
FROM airports
LIMIT 0,5")
# dbConnect_scidb is accessible from the mdsr package
aircon <- dbConnect_scidb("airlines")
# remember can use SHOW and EXPLAIN commands to explore what tables are available
# through this connection, and what variables/fields are in each table
dbGetQuery(aircon, "SHOW TABLES")
#dbGetQuery(aircon, "EXPLAIN airports")
# can view first few obs of a table to see what the fields look like
dbGetQuery(aircon, "SELECT *
FROM flights
LIMIT 0,5")
#| label: load-packages
#| include: false
library(kableExtra)
library(tidyverse)
library(mdsr)
library(RMySQL)
# add other packages needed here!
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
# Goal: repeatedly generate data, fit the model,
# and extract the beta1 coefficient (1,000 times)
# for both models (1) and (2)
# set seed for reproducibility
set.seed(231)
# number of simulations
n_sim <- 1000
#for iteration
x <- 1:n_sim
#
beta_model1 <- 1:n_sim
beta_model2 <- 1:n_sim
# number of observations in each sample
n_obs <- 250
# set needed values for data generation
rmse <- 1
x1 <- rep(c(0,1), each=n_obs/2)
x2 <- runif(n_obs, min=0, max=5)
beta0 <- -1
beta1 <- 0.5
beta2 <- 1.5
# Generate data
for(i in 1:1000){
# for model 1, where constant var assumption is met (sd is constant value, rmse)
y1 <- beta0 + beta1*x1 + beta2*x2 + rnorm(n=n_obs, mean=0, sd=rmse)
# for model 2, where constant var assumption is violated (sd depends on x2)
y2 <- beta0 + beta1*x1 + beta2*x2 + rnorm(n=n_obs, mean=0, sd=rmse + x2)
# Fit the linear regression model
# for model 1
mod1 <- lm(y1 ~ x1 + x2)
# for model 2
mod2 <- lm(y2 ~ x1 + x2)
# Example to get beta_1 estimate from one model
beta_model1[i] <- summary(mod1)$coeff["x1","Estimate"]
beta_model2[i] <- summary(mod2)$coeff["x2", "Estimate"]
}
#| label: load-packages
#| include: false
library(kableExtra)
library(tidyverse)
library(mdsr)
library(RMySQL)
library(ggplot2)
# add other packages needed here!
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1, Model = "Model 1")
model2_dataframe <- data.frame(Beta1 = beta_model2, Model = "Model 2")
# target summary numbers: mean and sd/variance of beta_1 estimates, by model
# create target visualization
# create target summaries
View(model1_dataframe)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model
# create target visualization
# create target summaries
View(model1_dataframe)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summary <- c(mean(beta_model1), sd(beta_model1))
model2_summary <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
# create target summaries
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
model1_summarydf <- data.frame(model1_summaryCalculation)
model2_summarydf <- data.frame(model2_summaryCalculation)
# create target visualization
# create target summaries
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
model1_summarydf <- data.frame(model1_summaryCalculation)
model2_summarydf <- data.frame(model2_summaryCalculation)
summary_df <- rbind(model1_summarydf, model2_summarydf)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
df_model1 <- data.frame(Beta1 = beta_model1, Model = "Model 1")
df_model2 <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df <- rbind(df_model1, df_model2)
ggplot(df, aes(x=Beta1, fill=Model)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
df_model1 <- data.frame(Beta1 = beta_model1, Model = "Model 1")
df_model2 <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df <- rbind(df_model1, df_model2)
ggplot(df, aes(x=Beta1, fill=Model)) +
geom_histogram(position="identity") +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
df_model1 <- data.frame(Beta1 = beta_model1, Model = "Model 1")
df_model2 <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df <- rbind(df_model1, df_model2)
ggplot(df, aes(x=Beta1, fill=Model)) +
geom_histogram() +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
model1_df <- data.frame(Beta1 = beta_model1, Model = "Model 1")
model2_df <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df_modelsVIS <- rbind(model1_df, model2_df)
ggplot(df_modelsVIS, aes(x=Beta1, fill=Model)) +
geom_histogram() +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
model1_df <- data.frame(Beta1 = beta_model1, Model = "Model 1")
model2_df <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df_modelsVIS <- rbind(model1_df, model2_df)
ggplot(df_modelsVIS, aes(x=Beta1)) +
geom_histogram() +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
model1_df <- data.frame(Beta1 = beta_model1, Model = "Model 1")
model2_df <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df_modelsVIS <- rbind(model1_df, model2_df)
ggplot(df_modelsVIS, aes(x=Beta1, color=Model)) +
geom_histogram() +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
model1_df <- data.frame(Beta1 = beta_model1, Model = "Model 1")
model2_df <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df_modelsVIS <- rbind(model1_df, model2_df)
ggplot(df_modelsVIS, aes(x=Beta1, shape=Model)) +
geom_histogram() +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)
# target visualization: sampling distribution of \hat{beta}_1
#                 (histogram or density plot of \beta_1 estimates), by model
#Creating dataframes so we can use them in ggplot
model1_dataframe <- data.frame(Beta1 = beta_model1)
model2_dataframe <- data.frame(Beta1 = beta_model2)
# target summary numbers: mean and sd/variance of beta_1 estimates, by model\
model1_summaryCalculation <- c(mean(beta_model1), sd(beta_model1))
model2_summaryCalculation <- c(mean(beta_model2), sd(beta_model2))
# create target visualization
model1_df <- data.frame(Beta1 = beta_model1, Model = "Model 1")
model2_df <- data.frame(Beta1 = beta_model2, Model = "Model 2")
df_modelsVIS <- rbind(model1_df, model2_df)
ggplot(df_modelsVIS, aes(x=Beta1, color=Model)) +
geom_histogram() +
labs(title="Beta 1 Values Distribution", x="Beta 1", y="Frequency")
# create target summaries
model1_summarydf <- data.frame(
Model = "Model 1",
Mean = model1_summaryCalculation[1],
SD = model1_summaryCalculation[2]
)
model2_summarydf <- data.frame(
Model = "Model 2",
Mean = model2_summaryCalculation[1],
SD = model2_summaryCalculation[2]
)
summary_df <- rbind(model1_summarydf, model2_summarydf)
print(summary_df)

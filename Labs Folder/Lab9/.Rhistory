#| include: false
# load packages
library(tidyverse)
library(kableExtra)
library(sf)
library(viridis)
library(leaflet)
# set code chunk defaults
knitr::opts_chunk$set(tidy = F, # display code as typed
size = "small", # slightly smaller code font
message = FALSE,
warning = FALSE,
comment = "\t")
# set black & white default plot theme
theme_set(theme_classic())
# improve digit and NA display
options(scipen = 1, knitr.kable.NA = '')
# Get a dataframe with longitude and latitude
world_map_df <- map_data(map = "world")
head(world_map_df)
tail(world_map_df)
ggplot(world_map_df, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightgrey", color = "white") +
# Use empty theme to remove background color, axes, ticks
theme_void()
# Often preferred because it preserves aspect ratio
# Obtain sf object of world map
world_map <- maps::map("world", plot = FALSE, fill = TRUE) %>%
st_as_sf()
head(world_map)
ggplot(data = world_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
nz_map <- maps::map("New Zeland", plot = FALSE, fill = TRUE)
View(world_map)
nz_map <- maps::map("New Zealand", plot = FALSE, fill = TRUE)
nz_map <- maps::map("New Zealand", plot = FALSE, fill = TRUE) %>%
st_as_sf()
nz_map <- maps::map("New Zealand", plot = FALSE, fill = TRUE) %>%
st_as_sf()
nz_map <- maps::map("NZ", plot = FALSE, fill = TRUE) %>%
st_as_sf()
nz_map <- maps::map("nz", plot = FALSE, fill = TRUE) %>%
st_as_sf()
head(nz_map)
ggplot(data = nz_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
nz_map <- maps::map("nz", plot = FALSE, fill = TRUE) %>%
st_as_sf()
head(nz_map)
ggplot(data = nz_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
# Identify appropriate region value from county map data
county_df <- map_data("county")
# Run in console to see how data appear: View(county_df)
# Create sf object for Massachusetts counties
ma_map <- maps::map("county", regions = "massachusetts",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot(data = ma_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
county_df <- map_data("county")
?maps::map
county_df <- map_data("county")
ma_map <- maps::map("county", regions = "usa",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
county_df <- map_data("county")
ma_map <- maps::map("county", regions = "massachusetts",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot(data = ma_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
?map_data
states <- map_data("state")
ma_map <- maps::map("county", regions = "massachusetts",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot(data = ma_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
states <- map_data("state")
ma_map <- maps::map("county", regions = "usa",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
states <- map_data("state")
ma_map <- maps::map("county", regions = "",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot(data = ma_map) +
geom_sf(fill = "lightgrey", color = "white") +
theme_void()
states <- map_data("state")
state_map <- maps:: map("state", plot = FALSE, fill = TRUE)%>%
st_as_sf()
ma_map <- maps::map("county", regions = "",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot() +
geom_sf(data = "ma_map", fill = "lightgrey", color = "white") +
geom_sf(data = "state", fill = NA, color = "black")
states <- map_data("state")
state_map <- maps:: map("state", plot = FALSE, fill = TRUE)%>%
st_as_sf()
county <- maps::map("county", regions = "",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot() +
geom_sf(data = "county", fill = "lightgrey", color = "white") +
geom_sf(data = "state", fill = NA, color = "black")
states <- map_data("state")
state_map <- maps:: map("state", plot = FALSE, fill = TRUE)%>%
st_as_sf()
county <- maps::map("county", regions = "",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot() +
geom_sf(data = "county", fill = "lightgrey", color = "white") +
geom_sf(data = "state", fill = NA, color = "black") +
theme_void()
states <- map_data("state")
state_map <- maps:: map("state", plot = FALSE, fill = TRUE)%>%
st_as_sf()
county <- maps::map("county", regions = "",
plot = FALSE, fill = TRUE) %>%
st_as_sf()
ggplot() +
geom_sf(data = county, fill = "lightgrey", color = "white") +
geom_sf(data = state_map, fill = NA, color = "black") +
theme_void()
#| echo: false  #no one needs to see our code to clean up the workspace, really
# cleaning environment of everything but state map information before continuing
rm(county_df,
county_map, # edit as needed if you named objects differently
ma_map,
nz_map,
world_map,
world_map_df)
# Load data
college_plans <- read_csv("data/chronicle_plans.csv")
# Wrangle
college_plans <- college_plans %>%
# Some plans are embedded within HTML tags within X.1 variable
# so we want to extract all the text between ">" and "<"
extract(col = X.1, into = "plans_extracted",
regex = ">(.*)<", remove = FALSE) %>%
# Combine extracted text with plain text of plans from X.1
mutate(plans = case_when(is.na(plans_extracted) ~ X.1,
TRUE ~ plans_extracted)) %>%
# Remove rows without plans
filter(plans != "Link")
head(college_plans)
# Check summary of plans
college_plans %>% count(plans)
# Count colleges per state
colleges_per_state <- college_plans %>%
count(State) %>%
rename(n_colleges = n)
head(colleges_per_state)
# Count colleges in-person per state
college_plans_per_state <- college_plans %>%
count(State, plans) %>%
# Fill in 0s as needed (e.g., no schools in a state have in-person plans)
ungroup() %>%
complete(State, plans, fill = list(n = 0)) %>%
filter(plans == "Planning for in-person") %>%
rename(n_in_person = n)
head(college_plans_per_state)
# Join for final dataset
college_plan_summary <- colleges_per_state %>%
left_join(college_plans_per_state) %>%
mutate(proportion_in_person = n_in_person/n_colleges)
head(college_plan_summary)

label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
summarize(
group_by(activity)
)
#| label: setup
#| include: false
# set code chunk option defaults
knitr::opts_chunk$set(
# display code as types
tidy = FALSE,
# slightly smaller code font
size = "small",
# do not display messages in PDF
message = FALSE,
# set default figure width and height
fig.width = 5, fig.height = 3)
# improve digit and NA display
options(scipen = 1, knitr.kable.NA = '')
# load packages
library(tidyverse)
library(lubridate)
library(ical)
library(kableExtra)
library(janitor)
library(dplyr)
# do you need more packages?
#| label: gcal-starter-code
#| eval: false #be sure to set this to true and/or just remove
# Data import (requires **ical** package)
cal_import <- ical_parse_df("stat231tracking.ics")
# Data wrangling
mycal <-
cal_import %>%
# Google Calendar event names are in a variable called "summary";
# "activity" is a more relevant/informative variable name.
rename(activity = summary) %>%
mutate(
# Specify time zone (defaults to UTC otherwise)
across(c(start, end),
.fns = with_tz,
tzone = "America/New_York"),
# Compute duration of each activity in hours
duration_hours = interval(start, end) / hours(1),
# Examples of getting components of dates/times
# Note:
# i. these could be based on either start datetime or end datetime
# ii. you do NOT need all of these!! so only use what you need
date = date(start),
year = year(start),
month_number = month(start),
month_label = month(start,
label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
summarize(
group_by(activity)
)
#| label: gcal-starter-code
#| eval: false #be sure to set this to true and/or just remove
# Data import (requires **ical** package)
cal_import <- ical_parse_df("stat231tracking.ics")
# Data wrangling
mycal <-
cal_import %>%
# Google Calendar event names are in a variable called "summary";
# "activity" is a more relevant/informative variable name.
rename(activity = summary) %>%
mutate(
# Specify time zone (defaults to UTC otherwise)
across(c(start, end),
.fns = with_tz,
tzone = "America/New_York"),
# Compute duration of each activity in hours
duration_hours = interval(start, end) / hours(1),
# Examples of getting components of dates/times
# Note:
# i. these could be based on either start datetime or end datetime
# ii. you do NOT need all of these!! so only use what you need
date = date(start),
year = year(start),
month_number = month(start),
month_label = month(start,
label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(activity) %>%
summarize(
)
kable(summary_mycal)
#| label: gcal-starter-code
#| eval: false #be sure to set this to true and/or just remove
# Data import (requires **ical** package)
cal_import <- ical_parse_df("stat231tracking.ics")
# Data wrangling
mycal <-
cal_import %>%
# Google Calendar event names are in a variable called "summary";
# "activity" is a more relevant/informative variable name.
rename(activity = summary) %>%
mutate(
# Specify time zone (defaults to UTC otherwise)
across(c(start, end),
.fns = with_tz,
tzone = "America/New_York"),
# Compute duration of each activity in hours
duration_hours = interval(start, end) / hours(1),
# Examples of getting components of dates/times
# Note:
# i. these could be based on either start datetime or end datetime
# ii. you do NOT need all of these!! so only use what you need
date = date(start),
year = year(start),
month_number = month(start),
month_label = month(start,
label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(activity)
kable(summary_mycal)
#| label: gcal-starter-code
#| eval: false #be sure to set this to true and/or just remove
# Data import (requires **ical** package)
cal_import <- ical_parse_df("stat231tracking.ics")
# Data wrangling
mycal <-
cal_import %>%
# Google Calendar event names are in a variable called "summary";
# "activity" is a more relevant/informative variable name.
rename(activity = summary) %>%
mutate(
# Specify time zone (defaults to UTC otherwise)
across(c(start, end),
.fns = with_tz,
tzone = "America/New_York"),
# Compute duration of each activity in hours
duration_hours = interval(start, end) / hours(1),
# Examples of getting components of dates/times
# Note:
# i. these could be based on either start datetime or end datetime
# ii. you do NOT need all of these!! so only use what you need
date = date(start),
year = year(start),
month_number = month(start),
month_label = month(start,
label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(activity)
kable(summary_mycal)
ggplot(summary_mycal, aes(x = activity, y = duration_hours)) +
geom_boxplot() +
labs(x = "Activity", y = "Duration (hours)") +
ggtitle("Boxplot of Duration of Activities") +
theme_minimal()
#| label: gcal-starter-code
#| eval: false #be sure to set this to true and/or just remove
# Data import (requires **ical** package)
cal_import <- ical_parse_df("stat231tracking.ics")
# Data wrangling
mycal <-
cal_import %>%
# Google Calendar event names are in a variable called "summary";
# "activity" is a more relevant/informative variable name.
rename(activity = summary) %>%
mutate(
# Specify time zone (defaults to UTC otherwise)
across(c(start, end),
.fns = with_tz,
tzone = "America/New_York"),
# Compute duration of each activity in hours
duration_hours = interval(start, end) / hours(1),
# Examples of getting components of dates/times
# Note:
# i. these could be based on either start datetime or end datetime
# ii. you do NOT need all of these!! so only use what you need
date = date(start),
year = year(start),
month_number = month(start),
month_label = month(start,
label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
#| label: gcal-starter-code
#| eval: false #be sure to set this to true and/or just remove
# Data import (requires **ical** package)
cal_import <- ical_parse_df("stat231tracking.ics")
# Data wrangling
mycal <-
cal_import %>%
# Google Calendar event names are in a variable called "summary";
# "activity" is a more relevant/informative variable name.
rename(activity = summary) %>%
mutate(
# Specify time zone (defaults to UTC otherwise)
across(c(start, end),
.fns = with_tz,
tzone = "America/New_York"),
# Compute duration of each activity in hours
duration_hours = interval(start, end) / hours(1),
# Examples of getting components of dates/times
# Note:
# i. these could be based on either start datetime or end datetime
# ii. you do NOT need all of these!! so only use what you need
date = date(start),
year = year(start),
month_number = month(start),
month_label = month(start,
label = TRUE,
abbr = FALSE),
weekday_number = wday(start),
weekday_label = wday(start,
label = TRUE,
abbr = FALSE),
hour = hour(start),
time = hour(start) + minute(start)/60,
# Convert text to lowercase and remove repeated or leading/trailing
# spaces to help clean up inconsistent formatting.
across(c(activity, description),
.fns = str_to_lower),
across(c(activity, description),
.fns = str_squish)
) %>%
# The first Google Calendar entry is always an empty 1969 event
filter(year != 1969)
kable(mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(activity) %>%
summarize(
Activity = activity,
Location = description,
Duration = duration_hours
)
kable(summary_mycal)
ggplot(summary_mycal, aes(x = activity, y = duration_hours)) +
geom_boxplot() +
labs(x = "Activity", y = "Duration (hours)") +
ggtitle("Boxplot of Duration of Activities") +
theme_minimal()
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(activity) %>%
summarize(
Activity = activity,
Location = description,
Duration = duration_hours
)
kable(summary_mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(description) %>%
summarize(
Activity = activity,
Location = description,
Duration = duration_hours
)
kable(summary_mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(description) %>%
summarize(
Activity = activity,
Location = description,
Duration = sum(duration_hours)
)
kable(summary_mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
group_by(activity) %>%
summarize(
Activity = activity,
Location = description,
Duration = sum(duration_hours)
)
kable(summary_mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
)
kable(mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
)
kable(summary_mycal)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
)
ggplot(summary_mycal, aes(x = activity, y = duration_hours)) +
geom_boxplot(fill = "skyblue", color = "blue") +
theme_minimal() +
coord_flip() +
labs(x = "Activity", y = "Duration (hours)", title = "Distribution of Duration for Each Activity")
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
)
ggplot(summary_mycal, aes(x = activity, y = duration_hours)) +
geom_boxplot(fill = "skyblue", color = "blue") +
theme_minimal() +
coord_flip() +
labs(x = "Activity", y = "Duration (hours)", title = "Distribution of Duration for Each Activity") +
facet_wrap(~description)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename (
Activitty = activity, Location = Description, Duration = duration_hours
)
mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename (
Activitty = activity, Location = Description, Duration = duration_hours
)
mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename (
Activity = activity, Location = Description, Duration = duration_hours
)
mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename (
Activity = activity, Location = description, Duration = duration_hours
)
mycal <- mycal %>%
separate(activity, into = c("task", "activity_name"), sep = "(?<=coursework|homework)", remove = FALSE) %>%
select(-activity_name)
mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename (
Activity = activity, Location = description, Duration = duration_hours
)
library(tidyr)
mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename(
Activity = activity, Location = description, Duration = duration_hours
)
library(tidyr)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename(
Activity = activity, Location = description, Duration = duration_hours
)
#| label: setup
#| include: false
# set code chunk option defaults
knitr::opts_chunk$set(
# display code as types
tidy = FALSE,
# slightly smaller code font
size = "small",
# do not display messages in PDF
message = FALSE,
# set default figure width and height
fig.width = 5, fig.height = 3)
# improve digit and NA display
options(scipen = 1, knitr.kable.NA = '')
# load packages
library(tidyverse)
library(lubridate)
library(ical)
library(kableExtra)
library(janitor)
library(dplyr)
# do you need more packages?
library(tidyr)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
) %>%
rename(
Activity = activity, Location = description, Duration = duration_hours
)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
)
summary_mycal <- mycal %>%
select(
activity, description, duration_hours
)
